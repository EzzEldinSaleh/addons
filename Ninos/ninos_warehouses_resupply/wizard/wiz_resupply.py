from odoo import api, fields, modelsimport ioimport base64from odoo import api, fields, models, _try:    from odoo.tools.misc import xlsxwriterexcept ImportError:    import xlsxwriterclass WizardWarehouse(models.TransientModel):    _name = 'wizard.warehouse'    warehouses_ids = fields.Many2many(comodel_name="stock.warehouse", string="Warehouses", required=True)    date_from = fields.Date(string="Date From", required=True, )    date_to = fields.Date(string="Date To", required=True, )    excel_sheet = fields.Binary('Download Report')    # excel_sheet_name = fields.Char(string='Name', size=64)    def print_report_resupply(self):        data = {            'model': 'wizard.warehouse',            'form': self.read()[0]        }        return self.env.ref('ninos_warehouses_resupply.report_warehouse').with_context(landscape=True).report_action(self, data=data)    def print_report_resupply_xls(self):        row = 2        col = 1        report_name = 'Report Resupply'        output = io.BytesIO()        workbook = xlsxwriter.Workbook(output, {'in_memory': True})        sheet = workbook.add_worksheet(report_name[:31])        bold = workbook.add_format({'bold': True, 'align': 'center','border': 2})        line = workbook.add_format({'align': 'center','border': 1})        sheet.merge_range(f"B{row + 1}:E{row + 1}", 'Date From:%s' % self.date_from, bold)        row += 1        sheet.merge_range(f"B{row + 1}:E{row + 1}", 'Date To:%s' % self.date_to, bold)        row += 2        for warhouse in self.warehouses_ids:            sheet.merge_range(f"B{row + 1}:F{row + 1}", warhouse.name, bold)            row = row + 2            sheet.merge_range(row, col, row, 3, "Products", bold)            sheet.write(row, col + 3, "On Hand", bold)            sheet.merge_range(f"F{row + 1}:G{row + 1}", "Sales", bold)            products = self.env['product.product'].search([])            for product in products:                saleorderlines = self.env['sale.order.line'].search(                    [('order_id.warehouse_id', '=', warhouse.id),                     ('order_id.date_order', '>=', self.date_from),                     ('order_id.date_order', '<=', self.date_to),                     ('product_id', '=', product.id)])                onhand = product.with_context(                    warehouse=warhouse.id                ).qty_available                totalproduct = sum(saleorderlines.mapped('product_uom_qty'))                if saleorderlines or onhand:                    row = row + 1                    sheet.merge_range(row, col, row, 3, product.name, line)                    sheet.write(row, col + 3, onhand, line)                    sheet.merge_range(f"F{row + 1}:G{row + 1}", totalproduct, line)            row += 1            # sheet.merge_range(f"B{row + 1}:F{row + 1}", "Qty can be manufactured")            # sheet.write(row, col + 5, minimum_fp)            row += 5        excel_sheet_name = 'Report Resupply'        workbook.close()        output.seek(0)        self.excel_sheet = base64.encodestring(output.read())        excel_sheet_name = str(excel_sheet_name) + '.xlsx'        return {            'type': 'ir.actions.act_url',            'name': 'Report Resupply',            'url': '/web/content/wizard.warehouse/%s/excel_sheet/Report Resupply.xlsx?download=true' % (self.id),            'target': 'self'        }